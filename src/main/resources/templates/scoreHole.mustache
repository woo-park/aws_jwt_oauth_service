<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Score Hole</title>

    <!--  mobile friendly css  -->
    <link rel="stylesheet" href="/css/mainContainer.css">
    <link rel="stylesheet" href="/css/topMenuNavigation.css">
    <link rel="stylesheet" href="/css/bottomMenuNavigation.css">
    <link rel="stylesheet" href="/css/roundTable.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.1.6/css/swiper.min.css">
    <style>
        /* Quick reset and demo styles */

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Nanum Gothic", "Dotum", "Baekmuk Dotum", "Undotum", "Apple Gothic", "Latin font", sans-serif;
        }

        body {

            background: #ededed;
        }


        /* Swipe select */

        .swipelect {
            position: relative;
            width: 100%;
            /*max-width: 540px;*/

            height: 100%; /*height: 75px;*/
            border-bottom: solid 1px #aaa;
            overflow: hidden;
            background: #fff;
        }

        /* Label */

        .swipelect__label {
            position: absolute;
            bottom: 12px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 12px;
            line-height: 1;
            text-transform: uppercase;
        }

        /* Container */

        .swipelect__container {
            height: 100%;
        }

        /* Overlay */

        .swipelect__overlay::before,
        .swipelect__overlay::after {
            content: '';
            position: absolute;
            z-index: 2;
            top: 0;
            width: 0;
            bottom: 25px;
            pointer-events: none;
        }

        .swipelect__overlay::before {
            left: 0;
            background: -webkit-linear-gradient(right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.75) 25%);
            background: linear-gradient(to left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.75) 25%);
        }

        .swipelect__overlay::after {
            right: 0;
            background: -webkit-linear-gradient(left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.75) 25%);
            background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.75) 25%);
        }

        .swipelect--per-view-5 .swipelect__overlay::before,
        .swipelect--per-view-5 .swipelect__overlay::after {
            width: 45%;
        }

        .swipelect--per-view-4 .swipelect__overlay::before,
        .swipelect--per-view-4 .swipelect__overlay::after {
            width: 40%;
        }

        .swipelect--per-view-3 .swipelect__overlay::before,
        .swipelect--per-view-3 .swipelect__overlay::after {
            width: 33%;
        }

        .swipelect--per-view-2 .swipelect__overlay::before,
        .swipelect--per-view-2 .swipelect__overlay::after {
            width: 25%;
        }

        /* Slide */

        .swipelect__slide {
            position: relative;
            display: -webkit-box;
            display: -ms-flexbox;
            display: -webkit-flex;
            display: flex;
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            -webkit-justify-content: center;
            justify-content: center;
            -webkit-box-align: center;
            -ms-flex-align: center;
            -webkit-align-items: center;
            align-items: center;

            font-size: 18px;
            font-weight: bold;
        }


        /* small tick */
        /* .swipelect__slide::before {
            content: '';
            position: absolute;
            width: 1px;
            height: 5px;
            bottom: 1px;
            left: 0;
            transform: translateX(-50%);
            background: #ccc;
        } */

        .swipelect__slide:first-child::before {
            display: none;
        }

        .swipelect__slide::after {
            content: '';
            position: absolute;
            width: 1px;
            height: 8px;
            bottom: 1px;
            left: 50%;
            transform: translateX(-50%);
            background: #aaa;
        }

        .left_column {
            width: 25%;
            background-color: #fff;
            border-bottom: solid 1px #aaa;

            display: flex;
            justify-content: center;
            align-items: center;
            height: 75px;
        }

        .single_row {
            background-color: #fff;
            display: flex;
            justify-content: center;
            align-items:flex-start;
            width: 100%;
            height: 200px;
        }

        .right_column {
            background-color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 75%;
            height: 75px;
        }

        .table_row {
            display: flex;
        }

        .update_button {
            margin-top:35px;
            text-transform: uppercase;
        }



        a.button {
            display: block;
            position: relative;
            float: left;
            width: 120px;
            padding: 0;
            margin: 10px 20px 10px 0;
            font-weight: 600;
            text-align: center;
            line-height: 50px;
            color: #FFF;
            border-radius: 5px;
            transition: all 0.2s;
        }

        .btnLightBlue.btnPush {
            /*button shadow*/
            box-shadow: 0px 5px 0px 0px #5e5e5e;
            font-size: 0.8rem;
        }

        .btnLightBlue{
            background: #e3e3e3;
        }


        .btnPush:hover {
            margin-top: 15px;
            margin-bottom: 5px;
        }

        .btnLightBlue.btnPush:hover {
            box-shadow: 0px 0px 0px 0px #5e5e5e;
        }

        a:visited {
            text-decoration: none;
            color: #3c3b3b;
        }
        a {
            text-decoration: none;
            color: #3c3b3b;
        }
    </style>
</head>


<body>
<!-- https://codepen.io/henripeetsmann/pen/rdNxbE -->



<div class="navigationContainer">

    <div class="header">
        <div class="logo"><a href="">
            <img src="https://brolik.com/images/BRO_logo.svg"></a>
        </div>

        <div class="icon-container">
            <div id="menuicon">
                <div class="bar bar1"></div>
                <div class="bar bar2"></div>
            </div>
        </div>
        <div class="mobile-menu">
            <ul class="menu">
                <li class="menu-item"><a href="#">Home</a>
                </li>
                <li class="menu-item"><a href="#">Register</a>
                </li>
                <li class="menu-item"><a href="#">Start Round</a>
                </li>
                <li class="menu-item"><a href="#">My Rounds</a>
                </li>
                <li class="menu-item"><a href="#">My Latest Round</a>
                </li>
                <li class="menu-item"><a href="#">Support</a>
                </li>
            </ul>
        </div>
    </div>

</div>

<div class="container">

    <div class="content">
        <img src="https://images.apple.com/v/iphone/home/y/images/overview/hero-iphone-xr_large.jpg" alt="" />

        <article>
            <div class="table_row">
                <div class="left_column">Hole</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">hole</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div class="swiper-wrapper">
                                <!-- holesDto should have previous hole number && next hole number -->
                                <div class="swipelect__slide swiper-slide">{{#holesDto}}{{#holeNumber}}{{.}}{{/holeNumber}}{{/holesDto}}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <!-- When changin --per-view modifier, also update JS -->

            <div class="table_row">
                <div class="left_column">Par</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">par</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="par_active_slide" class="swiper-wrapper">
                                <div class="swipelect__slide swiper-slide" data-input-value="3">3</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="4">4</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="5">5</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table_row">
                <div class="left_column">Fairway</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">fairway</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="fairway_active_slide" class="swiper-wrapper">

                                <div class="swipelect__slide swiper-slide" data-input-value="X">X</div>
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="O">O</div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table_row">
                <div class="left_column">On Green</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">On</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="onGreen_active_slide" class="swiper-wrapper">

                                <div class="swipelect__slide swiper-slide" data-input-value="X">X</div>
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="O">O</div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table_row">
                <div class="left_column">Bunker</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">bunker</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="bunker_active_slide" class="swiper-wrapper">

                                <div class="swipelect__slide swiper-slide" data-input-value="X">X</div>
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="O">O</div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="table_row">
                <div class="left_column">Approach</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">approach</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="approach_active_slide" class="swiper-wrapper">

                                <div class="swipelect__slide swiper-slide" data-input-value="X">X</div>
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="O">O</div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table_row">
                <div class="left_column">Up & Down</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">up & down</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="upDown_active_slide" class="swiper-wrapper">
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="O">Up</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="X">Down</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table_row">
                <div class="left_column">Putts</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">putts</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="putts_active_slide" class="swiper-wrapper">
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="0">0</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="1">1</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="2">2</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="3">3</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="4">4</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="5">5</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="6">6</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table_row">
                <div class="left_column">Score</div>
                <div class="right_column">
                    <div class="swipelect swipelect--per-view-4">
                        <div class="swipelect__label">score</div>
                        <div class="swipelect__container swiper-container">
                            <div class="swipelect__overlay"></div>
                            <div id="score_active_slide" class="swiper-wrapper">
                                <div class="swipelect__slide swiper-slide" data-input-value=""></div>
                                <div class="swipelect__slide swiper-slide" data-input-value="-2">-2</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="-1">-1</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="0">0</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="1">1</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="2">2</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="3">3</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="4">4</div>
                                <div class="swipelect__slide swiper-slide" data-input-value="5">5</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="table_row">
                <div class="single_row">

                    <div class="update_button">
                        <a id="submitBtn" href="" title="Button push lightblue" class="button btnPush btnLightBlue">Push</a>
                    </div>
                </div>

            </div>
        </article>
    </div>
</div>

<div class="w-navigation-menu">

    <div class="management-btn-wrap">
        <a href="#" class="management-btn w-logo-left-arrow">
            <span class="management-text">BACK</span>
        </a>
    </div>
    <div class="management-btn-wrap">
        <a href="/rounds" style="" class="management-btn w-logo-table">
            <span class="management-text">TABLE</span>
        </a>
    </div>
    <div class="management-btn-wrap">
        <a href="/" class="management-btn main-home-btn">
            <span class="management-btn-circle selec7-logo-circle bg-img"></span>
            <span class="management-text">HOME</span>
        </a>
    </div>

    <div class="management-btn-wrap">
        <a href="#" class="management-btn w-logo-calculator">
            <span class="management-text">STATS</span>
        </a>
    </div>

</div>

<input id="testing" value="{{#holesDto}}{{.}}{{/holesDto}}" >
<!--updatedDate=null, index=null, roundId=10, fairway=, par=3, onGreen=, upDown=, bunker=, putt=null, score=null, holeNumber=2)\""-->
{{#holesDto}}
    <form>
        <input id="par" type="hidden" value="{{#par}}{{.}}{{/par}}">
        <input id="fairway" type="hidden" value="{{#fairway}}{{.}}{{/fairway}}">
        <input id="onGreen" type="hidden" value="{{#onGreen}}{{.}}{{/onGreen}}">
        <input id="bunker" type="hidden" value="{{#bunker}}{{.}}{{/bunker}}">
        <input id="approach" type="hidden" value="{{#approach}}{{.}}{{/approach}}">
        <input id="upDown" type="hidden" value="{{#upDown}}{{.}}{{/upDown}}">
        <input id="putt" type="hidden" value="{{#putt}}{{.}}{{/putt}}">
        <input id="score" type="hidden" value="{{#score}}{{.}}{{/score}}">
    </form>
{{/holesDto}}



<script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.1.6/js/swiper.min.js"></script>

<!-- swiper-slide-active -->

<script>


    (function () {
        const header = document.querySelector('.header');
        const mobileMenu = document.querySelector('.mobile-menu');
        const icon = document.querySelector('.icon-container');
        icon.onclick = function () {
            header.classList.toggle('menu-open');
            mobileMenu.classList.toggle('menu-open');
        }
    }())

    var swiper = new Swiper(".swiper-container", {
        slidesPerView: 3,
        centeredSlides: true,
        spaceBetween: 0,
        grabCursor: true,
        preventClicks: true,
        freeMode: true,
        freeModeSticky: true,
        slideToClickedSlide: true,
        speed: 200,
        freeModeMomentumRatio: 0.3,
        freeModeMomentumVelocityRatio: 1,
    });

    // When changin the slidesPerView, also update HTML class modifier

</script>
<!-- https://codesandbox.io/s/ns46o?file=/index.html -->

<!--부트스트랩 js, jquery 추가-->
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

<script>

    // let myobj = $("#testing").val();
    // console.log(JSON.parse(myobj));
    // updatedDate=null, index=null, roundId=10, fairway=, par=3, onGreen=, upDown=, bunker=, putt=null, score=null, holeNumber=2)\""
    synchronize();

    function synchronize() {

        let sliderMap = {
            "par":1,
            "fairway":2,
            "onGreen":3,
            "bunker":4,
            "approach":5,
            "upDown":6,
            "putt":7,
            "score":8,
        }

        /***  par swiper handler  ***/
        let par = $("#par").val();
        if(par !== "" && par !== null) {
            let targetIndex;
            Array.from(swiper[sliderMap.par].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == par) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== 'undefined') {
                swiper[sliderMap.par].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }


        /*
        function b (field, ind) {
            let v = $("#"+ field).val();
            if (v !== "" && v !== null && typeof v !== 'undefined') {
                let targetIndex;

            }
        }
        */


        /***  fairway swiper handler  ***/
        let fairway = $("#fairway").val();
        if(fairway !== "" && fairway !== null && typeof fairway !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.fairway].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == fairway) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.fairway].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }



        /***  upDown swiper handler  ***/
        let upDown = $("#upDown").val();
        if(upDown !== "" && upDown !== null && typeof upDown !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.upDown].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == upDown) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.upDown].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }


        /***  onGreen swiper handler  ***/
        let onGreen = $("#onGreen").val();
        if(onGreen !== "" && onGreen !== null && typeof onGreen !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.onGreen].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == onGreen) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.onGreen].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }


        /***  bunker swiper handler  ***/
        let bunker = $("#bunker").val();
        if(bunker !== "" && bunker !== null && typeof bunker !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.bunker].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == bunker) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.bunker].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        } else {
            let targetIndex;
            // swiper[sliderMap.bunker].find("swiper_blah") dot dataIndex = blah
            // get the index
            // move to the index;
            // $("ul#wizard li").index(this);
        }

        /***  putt swiper handler  ***/
        let putt = $("#putt").val();
        if(putt !== "" && putt !== null && typeof putt !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.putt].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == putt) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.putt].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }

        /***  approach swiper handler  ***/
        let approach = $("#approach").val();    // skipped
        if(approach !== "" && approach !== null && typeof approach !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.approach].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == approach) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.approach].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }



        /***  score swiper handler  ***/
        let score = $("#score").val();
        if(score !== "" && score !== null && typeof score !== 'undefined') {
            let targetIndex;
            Array.from(swiper[sliderMap.score].slides).forEach((element, index) => {
                let value = $(element).data("input-value");
                if(value == score) {
                    targetIndex = index;
                    return false;
                }
            });

            if(typeof targetIndex !== undefined) {
                swiper[sliderMap.score].slideTo(targetIndex,0,false);
            } else {
                console.log('undefined targetIndex? :', targetIndex);
            }
        }


        let pojo = {
            par,
            fairway,
            upDown,
            onGreen,
            bunker,
            approach,
            putt,
            score
        }
        console.log('pojo', pojo);

    }


    var holes = {
        error: false,          //using this as a semi-global variable, to trigger return false;
        init: function () {


            // swiper.slideTo(index, speed, runCallbacks)




            var _this = this;
            $('#submitBtn').on('click', function () {

                _this.save();
            });
        },
        isInt: function (value) {
            return !isNaN(value) && (function (x) { return (x | 0) === x; })(parseFloat(value))
        },
        save: function () {

            let par = $("#par_active_slide").find(".swiper-slide-active").data("input-value");
            let fairway = $("#fairway_active_slide").find(".swiper-slide-active").data("input-value");
            let upDown = $("#upDown_active_slide").find(".swiper-slide-active").data("input-value");
            let onGreen = $("#onGreen_active_slide").find(".swiper-slide-active").data("input-value");
            let bunker = $("#bunker_active_slide").find(".swiper-slide-active").data("input-value");
            let approach = $("#approach_active_slide").find(".swiper-slide-active").data("input-value");
            let putt = $("#putts_active_slide").find(".swiper-slide-active").data("input-value");
            let score = $("#score_active_slide").find(".swiper-slide-active").data("input-value");

            var roundsDto = {
                "par": par,
                "fairway": fairway,
                "upDown": upDown,
                "bunker": bunker,
                "onGreen": onGreen,
                "putt": putt,
                "score": score,
                // "holeNumber": holeNumber,
                // "roundId": roundId,
            };

            console.log(roundsDto, '<- roundsDto');

            let url = "/rounds/" + roundId + "/" + holeNumber
            $.ajax({
                type: 'POST',
                url: url,
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(roundsDto),
                success: function (res) {
                    alert('score 수정되었습니다');
                    window.location.href = '/rounds/1/2';
                },
                error: function (err) {
                    console.log(err);
                    alert(JSON.stringify(error));
                }
            });
        },
    }

    $(document).ready(function () {
        console.log($('#par').val(), ":check the value");
        console.log('/rounds/1/2');

        holes.init();

    });
</script>
</body>

</html>