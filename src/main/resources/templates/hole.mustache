<!DOCTYPE HTML>
<html>
<head>
    <title>On Pedestal</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>

        @import url(https://fonts.googleapis.com/css?family=Open+Sans:400,600);

        *, *:before, *:after {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #105469;
            font-family: 'Open Sans', sans-serif;
            /*background: -webkit-linear-gradient(left, #25c481, #25b7c4);*/
            /*background: linear-gradient(to right, #25c481, #25b7c4);*/
        }
        table {
            background: #012B39;
            border-radius: 0.25em;
            border-collapse: collapse;
            margin: 1em;
        }
        th {
            border-bottom: 1px solid #364043;
            color: #E2B842;
            font-size: 0.85em;
            font-weight: 600;
            padding: 0.5em 1em;
            text-align: left;
        }

        tr td {
            border-right: 1px solid #364043;
        }

        tr td:first-child{
            color: #E2B842;
        }

        tr td:last-child{
            color: #E2B842;
        }

        td {
            color: #fff;
            font-weight: 400;
            padding: 0.65em 1em;
        }

        td:not(:first-child) {
            text-align: center;
        }


        .disabled td {
            color: #4F5F64;
        }
        tbody tr {
            transition: background 0.25s ease;
        }
        tbody tr:hover {
            background: #014055;
        }


        h1{
            font-size: 30px;
            color: #fff;
            text-transform: uppercase;
            font-weight: 300;
            text-align: center;
            margin-bottom: 15px;
        }

        body{

        }

        .tbl-content{
            overflow-x:auto;
            margin-top: 0px;
            border: 1px solid rgba(255,255,255,0.3);

        }

        table{
            margin: 50px;
        }
    </style>
    <!--    <link rel="stylesheet" href="/css/style.css" />-->
</head>
<body>

    <table>

        <caption><a href="/rounds/{{#roundId}}{{.}}{{/roundId}}">My round</a></caption>
        <thead>
            <tr>
                {{#holesDto}}
                    <th>Holes</th>
                    <th>{{#holeNumber}}{{.}}{{/holeNumber}}</th>
                {{/holesDto}}
            </tr>
        </thead>
        <tbody>
        {{#holesDto}}
            <tr >
                <td contenteditable="false">Par</td>
                <td contenteditable="true" tabindex="0" id="par" class="test">{{#par}}{{.}}{{/par}}</td>
            </tr>
            <tr >
                <td contenteditable="false">Fairway</td>
                <td contenteditable="true" tabindex="0" id="fairway" class="test">{{#fairway}}{{.}}{{/fairway}}</td>
            </tr>
<!--            <tr contenteditable="true" class="disabled">-->
<!--                <td contenteditable="false">OB/HZ</td>-->
<!--                <td></td>-->
<!--            </tr>-->
            <tr >
                <td contenteditable="false">On</td>
                <td contenteditable="true" id="onGreen" class="test">{{#onGreen}}{{.}}{{/onGreen}}</td>
            </tr>
            <tr >
                <td contenteditable="false">Up/Dw</td>
                <td contenteditable="true" id="upDown" class="test">{{#upDown}}{{.}}{{/upDown}}</td>
            </tr>
            <tr  class="disabled">
                <td contenteditable="false">Bunker</td>
                <td contenteditable="true" id="bunker" class="test">{{#bunker}}{{.}}{{/bunker}}</td>
            </tr>
            <tr >
                <td contenteditable="false">Putts</td>
                <td contenteditable="true" id="putt" class="test">{{#putt}}{{.}}{{/putt}}</td>
            </tr>
            <tr >
                <td contenteditable="false">Score</td>
                <td contenteditable="true" id="score" class="test">{{#score}}{{.}}{{/score}}</td>
            </tr>
        {{/holesDto}}

        {{^holesDto}}
            <tr >
                <td contenteditable="false">Par</td>
                <td contenteditable="true" id="par" class="test"></td>
            </tr>
            <tr >
                <td contenteditable="false">Fairway</td>
                <td contenteditable="true" id="fairway" class="test"></td>
            </tr>
            <tr >
                <td contenteditable="false">On</td>
                <td contenteditable="true" id="onGreen" class="test"></td>
            </tr>
            <tr>
                <td contenteditable="false">Up/Dw</td>
                <td contenteditable="true" id="upDown" class="test"></td>
            </tr>
            <tr  class="disabled">
                <td contenteditable="false">Bunker</td>
                <td contenteditable="true" id="bunker" class="test"></td>
            </tr>
            <tr >
                <td contenteditable="false">Putts</td>
                <td contenteditable="true" id="putt" class="test"></td>
            </tr>
            <tr >
                <td contenteditable="false">Score</td>
                <td contenteditable="true" id="score" class="test"></td>
            </tr>
        {{/holesDto}}
        </tbody>
    </table>

        <button id="submitBtn" tabindex="0" type="submit">Update</button>


    <section class="footer-section">
        <article>

            <div> BAY version 1.5 </div>

        </article>
    </section>

    <!--부트스트랩 js, jquery 추가-->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<!--    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>-->

    <!--index.js 추가-->
<!--    <script src="/js/app/index.js"></script>-->
    <script>
        console.log($('#par').val(),":check the value");
        console.log('/rounds/{{#holesDto}}{{#roundId}}{{.}}{{/roundId}}/{{#holeNumber}}{{.}}{{/holeNumber}}{{/holesDto}}');

        var holes = {
            error : false,          //using this as a semi-global variable, to trigger return false;
            init : function () {
                var _this = this;
                $('#submitBtn').on('click', function () {
                    _this.save();

                });

                this.focus();
            },
            focus : function () {

                let test_boolean = false;
                $('.test').on('keypress', function (e) {
                       //     console.log(e)

                           if (e.keyCode === 13) {


                               // validate the input
                               if(typeof $(e.currentTarget).text() === "string") {
                                   $(e.currentTarget).text($(e.currentTarget).text().toUpperCase());
                                   test_boolean = check_charcount( $(e.currentTarget), 1, e);
                               }

                               if(!test_boolean) {
                                   $(e.currentTarget).text("");
                                   // $(e.currentTarget).focus();
                                   return false;
                               }

                               let index = $(e.currentTarget).index('.test');

                               $(e.currentTarget).blur(); //this works

                               if(index !== $(".test").length - 1) {
                                   $(".test").eq(index + 1).focus();
                               } else if (index === $(".test").length - 1) {
                                    $("#submitBtn").focus();
                               }

                               return false;
                           }
                });


//                 var content_id = '.inputField';
//
//                 let max = 1;
// //binding keyup/down events on the contenteditable div
//                 $(content_id).keyup(function(e){ check_charcount(this, max, e); });
//                 $(content_id).keydown(function(e){ check_charcount(this, max, e); });
//
                function check_charcount(elem, max, e){
                    console.log(e);
                    if(e.which != 8 && $(elem).text().length > max){
                        console.log('greater than max');
                        e.preventDefault();
                        return false;
                    }
                    return true;
                }

            },
            breakOut : function (err) {
                switch (err) {
                    case 'fairway':
                        alert("fairway field input error: not Char X || O");
                        this.error = true;

                        $("#fairway").text("");
                        $("#fairway").focus();
                        break;
                    case 'upDown':
                        alert("upDown field input error: not Char X || O");
                        this.error = true;

                        $("#upDown").text("");
                        $("#upDown").focus();
                        break;
                    case 'bunker':
                        alert("bunker field input error: not Char X || O");
                        this.error = true;

                        $("#bunker").text("");
                        $("#bunker").focus();
                        break;
                    case 'onGreen':
                        alert("onGreen field input error: not Char X || O");
                        this.error = true;

                        $("#onGreen").text("");
                        $("#onGreen").focus();
                        break;
                    case 'putt':
                        alert("putt field input error: not integer");
                        this.error = true;
                        $("#putt").text("");
                        $("#putt").focus();
                        break;
                    case 'score':
                        alert("onGreen field input error: not integer");
                        this.error = true;

                        $("#score").text("");
                        $("#score").focus();
                        break;

                    case 'par':
                        alert("par field input error: not integer");
                        this.error = true;

                        $("#par").text("");
                        $("#par").focus();
                        break;
                    case 'holeNumber':
                        alert("onGreen field input error: not integer");
                        this.error = true;
                        break;
                    case 'roundId':
                        alert("onGreen field input error: not integer");
                        this.error = true;
                        break;

                    default:
                        this.error = true;
                        alert("Invalid Input");
                }
                return false;
            },
            isInt : function (value) {
                return !isNaN(value) && (function(x) { return (x | 0) === x; })(parseFloat(value))
            },
            save : function () {
                this.error = false;     // initialize again


                let par = $('#par').text();
                let fairway = $('#fairway').text().toUpperCase();
                let upDown = $('#upDown').text().toUpperCase();
                let bunker = $('#bunker').text().toUpperCase();
                let onGreen = $('#onGreen').text().toUpperCase();
                let putt = $('#putt').text();
                let score = $('#score').text();
                let holeNumber = {{#holeNumber}}{{.}}{{/holeNumber}};
                let roundId = {{#roundId}}{{.}}{{/roundId}};



                var roundsDto = {
                    "par": this.isInt(par) == true ? par : this.breakOut("par"),
                    "fairway": (fairway == "O" || fairway == "X") ? fairway : this.breakOut("fairway"),
                    "upDown": (upDown == "O" || upDown == "X") ? upDown : this.breakOut("upDown"),
                    "bunker": (bunker == "O" || bunker == "X") ? bunker : this.breakOut("bunker"),
                    "onGreen": (onGreen == "O" || onGreen == "X") ? onGreen : this.breakOut("onGreen"),
                    "putt": this.isInt(putt) == true ? putt : this.breakOut("putt"),
                    "score": this.isInt(score) ? score : this.breakOut("score"),
                    "holeNumber" : this.isInt(holeNumber) == true ? holeNumber : this.breakOut("holeNumber"),
                    "roundId" : this.isInt(roundId) == true ? roundId : this.breakOut("roundId"),
                };

                if(this.error) {
                    console.log("finishing early due to error == true");
                    return false;
                }

                console.log(roundsDto, '<- roundsDto');

                let url = "/rounds/"+roundId+"/"+holeNumber
                $.ajax({
                    type : 'POST',
                    url: url,
                    dataType: "json",
                    contentType: "application/json",
                    data: JSON.stringify(roundsDto),
                    success: function(res) {
                        alert('score 수정되었습니다');
                        window.location.href = '/rounds/{{#holesDto}}{{#roundId}}{{.}}{{/roundId}}/{{#holeNumber}}{{.}}{{/holeNumber}}{{/holesDto}}';
                    },
                    error: function(err) {
                        console.log(err);
                        alert(JSON.stringify(error));
                    }
                });
            },
        }


        $(document).ready(function() {

            holes.init();

        });



        // https://jsfiddle.net/qfLac3yj/

        //https://stackoverflow.com/questions/17142355/jquery-keyup-event-not-working-when-using-classes
    </script>
</body>
</html>
